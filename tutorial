Meow: Modal Editing On Dvorak

    Less is More

********************************************************************************

你当前正在一个文本编辑的 buffer 当中，正默认处于 normal 模式，而这个教程会说明 Meow 中的主要理念和思路。

（这个 buffer 为临时 buffer, 可随意修改）

首先你需要知道 g(C-g) 可以用来取消选择和一些操作，你可以在 mode-line 上看到当前的模式和一些信息。

使用 h(head)/t(tail)/p(prev)/n(next) 四个键来进行左右上下的移动。

********************************************************************************

将光标移动至下面的 baz 上。

foo bar baz

按下 m(mark/back word) 来选中当前词，从 mode-line 中得到当前选择类型为 word-mark. 此时再次按下 m 将标记前一个词。

按 g 取消选择。

按下 w(word) 来选择下一个词，即 baz. 当前选择类型为 word.

使用三次 m 选择到 foo. 注意： m 会取消非 word-mark 类型的（例如 word 类型）的选择。

使用两次 w 会将选择扩展到 baz. 此时三个词都被选中，选择类型为 word-expand.

此时若想只选择 baz 可以再按 m.

********************************************************************************

接下来你会看到向 insert 模式的切换，以及将移动和选择结合为同一指令的优点一。将光标移动至下面的 bcdef 上的任意位置并用 m 选择它。

bcdef

按 i 可以在选择的起点进入插入模式，使用 i a ESC 插入一个字符并退出到 normal 模式。

按 m 再次选中该词，使用 a 可以在选择的终点进入插入模式，使用 a g ESC 插入一个字符并退出到 normal 模式。

仅一个选择命令，可以同时给我们两个有意义的位置。

********************************************************************************

接下来是块的选择，将光标移动到下面的 foo 上。

(hello
  (baz
    (bar foo)))

按三次 b(block) 注意选择区域的变化。

这个指令最基础的效果就是选中当前表达式。

也经常用来跳出当前的表达式，起到 paredit 中 C-M-n 的作用。

由于选择了 top-level 之后不会继续扩展，可以直接通过长按 b 的方式来选择 top-level 表达式。

如果需要到块首，那么使用 r(reverse) 来翻转选择的方向，这个指令对所有的选择都可用。

********************************************************************************

使用 l(line) 来选择一整行，多次 l 来扩展选择，数字前缀 l 来一次选择多行。

1st line
2nd line
3rd line
4th line

l 扩展的方向取决于选择的方向，可以使用 r 来翻转选择的方向哦！

如果选多了怎么办，对于所有的选择指令，都可以使用 u(undo) 来撤消一次选择的变化。

在没有选择的时候， u 才是通常的 undo 的功能。

********************************************************************************

最后是表达式的选择。

使用 e(exp) 来选择一个表达式，了解它的行为，可以将光标放在下面的 foo 上，然后按住 e.

(outer (foo arg1 arg2 (list) arg3))

使用 f(flip) 来选择到该行或该块（取决于哪个更近）的最后一个表达式，例如要选中下面中的 y (+ 1 2 x),
将光标放在 y 再按下 f.

(let [x 100
      y (+ 1 2 x)]
  (+ x y))

好了，现在你已经了解了选择的部分。

命令中的其它部分都很传统，应该不需要过多的讲解。

********************************************************************************

接下来是 Keypad 模式

这个模式用来在不使用修饰键的前提下执行 C-x 和 C-c 两个 keymap 中的指令。

模式可以用 SPC x 或 SPC c 激活，可以在 mode-line 上看到提示，可以用 ESC 取消，可以用 BACKSPACE 撤消一次输入。

假如想使用 C-x 3，那么输入 SPC x 3。

如果命令中有 Meta, 例如 m 来表示。C-c M-j, 则是 SPC c m j.

如果命令中有单键，可以使用 SPC 来表示，例越 C-x s, 则是 SPC x SPC s.

没有歧义的时候，表示单键的 SPC 可以省略，这样我们输入一些比较长的命令比如 C-x C-r a s 的时候只要输入 SPC x r a s 就好了。

********************************************************************************

这段说明需要你同时安装了 paredit 和 smartparens. 将光标移动到下面的 foo 上。

(foo)
bar

按右括号，没有什么效果。因为这个命令需要下层的命令支持才可用。

在 normal 模式下使用 $ paredit RET 激活 paredit. 再按右括号，就可以把下面的 bar 吞进去了。

按 u 取消这个行为，关闭 paredit, 开启 smartparens, 再按右括号，依然可用。

你可以看到 meow-forward-slurp 这个指令实现中，没有使用硬编码的函数名，而是调用的按捷键上的指令。

由于我们使用 Modal editing, 所以原 Emacs 的快捷键可以完全保留，这些键成了下层命令和模式编辑的桥梁。

好处在于换一些基础功能增强插件的时候，不需要再修改关于模式编辑的配置。

同时也保证了不再需要一些插件来专门做兼容层，类似 evil-cleverparens 之类。

********************************************************************************

目前教程到这里就结束了， Happy hacking, meow!

