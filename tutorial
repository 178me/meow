(This buffer is a temporary buffer, you can came to this tutorial with command `meow-tutorial`)

Meow: Modal Editing On Wheel

    Less is More

********************************************************************************

Welcome to the tutorial of Meow! Now, you are in a text editing buffer, so the NORMAL state is activated by default.

This tutorial will show the basic commands and concepts in Meow.

Before we start:

1. Introduce the key notations we will use in the tutorial:

   <a> stands for "The key A"

   <a> (insert-after) stands for "The key A with a command insert-after bound to it"

   <C-x s> stands for Emacs keybinding `C-x s`.

2. You can check your current state, including the selection type in mode-line.

3. Of course, every Emacs vanilla keybindings are still work in Meow, just use it when you need.

Ok, let's start!

********************************************************************************

First of all,

<g> (keyboard-quit) can be used for cancel selection and some other commands.

And use <h> (head) / <t> (tail) / <p> (prev) / <n> (next) to move cursor left/right/up/down.

These commands will cancel current selection.

********************************************************************************

This section we will talk about Word Navigation/Selection.

Now move the cursor to the word "baz" in the next line:

foo bar baz

Okay, now press <m> (mark/back word) to mark current word.

In the mode-line, you can find current selection type is `word-mark`.

Press <m> again will mark the previous word "bar".

Now, cancel selection by press <g>.

Press <w> to selection the next word "baz". Notice: this selection has type `word`.

Press <m> 3 times, to mark "foo". Notice: <m> will cancel current selection.

Press <w> twice, you can find the selection has been expanded to "baz".

Here the rule is when <w> meet selection `word-mark`, it will expand the region and change selection type to `word-expand`.

Now, you can press <m> to mark the single word "baz".

********************************************************************************

In this section we will talk about how we switch to INSERT state.

Move cursor to the word "hello" in the next line, and mark it with <m>:

hello

Press <i> to activate INSERT state at the beginning of region, then you can insert whatever you want, then back to NORMAL state with <ESC>.

Press <m> again to mark the word.

You can also press <a> to activate INSERT state at the end of region.

So, activate the selection will give us two meaningful position, you will feel how convenient it is by learning more navigation commands.

Is this case, marking a word allow us to get both the point at word beginning and the point at word end.

********************************************************************************

In this section we will talk about the Block Navigation/Selection.

Move cursor to "foo".

(hello
  (baz
    (bar foo)))

Press <b> (block) 3 times, you will see how the selection is expanding by block.

There are some use cases.

First, use this to escape from current block, like C-M-n in paredit.

Second, when you holding <b>, the expanding will stop at top-level, this is how you mark the top-level form.

And you can press <i> or <a> to insert and beginning or end of a block.

If you just want move to the beginning, use <r> (reverse). This command will reverse the direction of selection.

<r> will works whenever you have a selection.

********************************************************************************

In this section we will talk about Line Navigation/Selection.

Use <l> (line) to mark the whole line, press again to expand by line.

1st line
2nd line
3rd line
4th line

How <l> expands depends on the direction of selection, you can reverse it with <r>.

If you want to shrink the selection, you can use <u> (undo).

<u> will undo the selection when there's a active region.

********************************************************************************

In this section we will talk about expression Navigation/Selection.

Use <e> (exp) to select a expression which is a sexp(symbol or list) in Emacs.

To understand how it works, move cursor to the "foo" and hold <e>.

(outer (foo arg1 arg2 (list) arg3))

Use <f> (flip) to make a selection from current point to last expression in current line or block(depends on which is near).

If you want to mark `y (+ 1 2 x)` in following code, put the cursor before "y" and press <f>.

(let [x 100
      y (+ 1 2 x)]
  (+ x y))

********************************************************************************

In this section we will talk about the KEYPAD state.

This state allows us to execute commands in C-x keymap and C-c keymap without modifiers.

You can activate KEYPAD state by either <SPC x> or <SPC c>, once it activated, you can see the indicator in mode-line.

Quit KEYPAD state with <ESC> or you can use <Backspace> to revert one input.

In KEYPAD state, every single key will be considered is pressed with Control.

So <SPC x 3> equals <C-x 3>.

If you need a Meta, use a prefix <m>.

<SPC c m j> equals <C-c M-j>.

If you want a key with no modifier, use a prefix <SPC>.

<SPC x SPC s> equals <C-x s>.

If there's no ambiguity, the prefix <SPC> can be omitted.

This is useful when we input some long key sequences, for command on <C-x C-r a s>, maybe we can use <SPC x r a s>.

********************************************************************************

This section will show you how Meow use underlying command.

Make sure you have paredit and smartparens installed.

Move cursor to "foo".

Press <)>, nothing will happen because this buffer use text-mode, both paredit and smartparens are disabled.

In NORMAL state, use <$ paredit RET> to turn on paredit.

Press <)> will slurp the "bar" into the list of "foo".

Cancel this change with <u>, disable paredit and enable smartparens.

Press <)> again, you will find it still work.

because the underlying commands in invoked with KBD macro instead of use command function name.

So <)> will call the command bound to <C-)>, no matter what command it is.

This make underlying options replaceable.

Since we are doing modal editing, Meow will preserve all default keybindings, and these keybindings will become the bridge between Meow and underlying commands.

You don't need extra stuff for compatibility.

********************************************************************************

Now you have finished the tutorial, this tutorial is still working in progress.

If you find anything wrong or missing, open an issue please, it will be really helpful.

Thanks for reading.

Happy Hacking, Meow!


